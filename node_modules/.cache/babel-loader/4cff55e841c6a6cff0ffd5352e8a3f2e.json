{"ast":null,"code":"var _jsxFileName = \"/Users/vadimpolovinko/Desktop/React learning/01-first/react-kabzda-01/src/components/Dialogs/DialogsContainer.jsx\";\nimport DialogItem from \"./Dialogitem/Dialogitem\";\nimport s from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { addPost, sendMessageCreator, updateNewMessageBodyCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DialogsContainer = props => {\n  let state = props.store.getState().dialogsPage;\n  let dialogsElements = state.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this));\n  let messagesElements = state.messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    text: m.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this));\n  let newMessageBody = state.newMessageBody;\n\n  let onSendMessageClick = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n\n  let onNewMessageChange = e => {\n    let body = e.target.value;\n    props.updateNewMessageBody();\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialogs, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n\n_c = DialogsContainer;\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["/Users/vadimpolovinko/Desktop/React learning/01-first/react-kabzda-01/src/components/Dialogs/DialogsContainer.jsx"],"names":["DialogItem","s","Message","React","addPost","sendMessageCreator","updateNewMessageBodyCreator","Dialogs","DialogsContainer","props","state","store","getState","dialogsPage","dialogsElements","dialogs","map","d","name","id","messagesElements","messages","m","message","newMessageBody","onSendMessageClick","dispatch","onNewMessageChange","e","body","target","value","updateNewMessageBody"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,2BAHF,QAIO,6BAJP;AAKA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYC,QAAZ,GAAuBC,WAAnC;AAEA,MAAIC,eAAe,GAAGJ,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAmBC,CAAD,iBACtC,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,CAAC,CAACC,IAApB;AAA0B,IAAA,EAAE,EAAED,CAAC,CAACE;AAAhC;AAAA;AAAA;AAAA;AAAA,UADoB,CAAtB;AAGA,MAAIC,gBAAgB,GAAGV,KAAK,CAACW,QAAN,CAAeL,GAAf,CAAoBM,CAAD,iBACxC,QAAC,OAAD;AAAS,IAAA,IAAI,EAAEA,CAAC,CAACC;AAAjB;AAAA;AAAA;AAAA;AAAA,UADqB,CAAvB;AAGA,MAAIC,cAAc,GAAGd,KAAK,CAACc,cAA3B;;AAEA,MAAIC,kBAAkB,GAAG,MAAM;AAC7BhB,IAAAA,KAAK,CAACE,KAAN,CAAYe,QAAZ,CAAqBrB,kBAAkB,EAAvC;AACD,GAFD;;AAGA,MAAIsB,kBAAkB,GAAIC,CAAD,IAAO;AAC9B,QAAIC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAApB;AACAtB,IAAAA,KAAK,CAACuB,oBAAN;AACAvB,IAAAA,KAAK,CAACE,KAAN,CAAYe,QAAZ,CAAqBpB,2BAA2B,CAACuB,IAAD,CAAhD;AACD,GAJD;;AAMA,sBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArBD;;KAAMrB,gB;AAuBN,eAAeA,gBAAf","sourcesContent":["import DialogItem from \"./Dialogitem/Dialogitem\";\nimport s from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport {\n  addPost,\n  sendMessageCreator,\n  updateNewMessageBodyCreator,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = (props) => {\n  let state = props.store.getState().dialogsPage;\n\n  let dialogsElements = state.dialogs.map((d) => (\n    <DialogItem name={d.name} id={d.id} />\n  ));\n  let messagesElements = state.messages.map((m) => (\n    <Message text={m.message} />\n  ));\n  let newMessageBody = state.newMessageBody;\n\n  let onSendMessageClick = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n  let onNewMessageChange = (e) => {\n    let body = e.target.value;\n    props.updateNewMessageBody()\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return <Dialogs />;\n};\n\nexport default DialogsContainer;\n"]},"metadata":{},"sourceType":"module"}